//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Diagnostics;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading.Tasks;

namespace OpenNos.ServiceRef.Internal.CommunicationServiceReference
{
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [ServiceContract(ConfigurationName = "CommunicationServiceReference.ICommunicationService", CallbackContract = typeof(ICommunicationServiceCallback))]
    public interface ICommunicationService
    {
        #region Methods

        [OperationContract(Action = "http://tempuri.org/ICommunicationService/AccountIsConnected", ReplyAction = "http://tempuri.org/ICommunicationService/AccountIsConnectedResponse")]
        bool AccountIsConnected(string accountName);

        [OperationContract(Action = "http://tempuri.org/ICommunicationService/AccountIsConnected", ReplyAction = "http://tempuri.org/ICommunicationService/AccountIsConnectedResponse")]
        Task<bool> AccountIsConnectedAsync(string accountName);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/Cleanup")]
        void Cleanup();

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/Cleanup")]
        Task CleanupAsync();

        [OperationContract(Action = "http://tempuri.org/ICommunicationService/ConnectAccount", ReplyAction = "http://tempuri.org/ICommunicationService/ConnectAccountResponse")]
        bool ConnectAccount(string accountName, int sessionId);

        [OperationContract(Action = "http://tempuri.org/ICommunicationService/ConnectAccount", ReplyAction = "http://tempuri.org/ICommunicationService/ConnectAccountResponse")]
        Task<bool> ConnectAccountAsync(string accountName, int sessionId);

        [OperationContract(Action = "http://tempuri.org/ICommunicationService/ConnectCharacter", ReplyAction = "http://tempuri.org/ICommunicationService/ConnectCharacterResponse")]
        bool ConnectCharacter(string characterName, string accountName);

        [OperationContract(Action = "http://tempuri.org/ICommunicationService/ConnectCharacter", ReplyAction = "http://tempuri.org/ICommunicationService/ConnectCharacterResponse")]
        Task<bool> ConnectCharacterAsync(string characterName, string accountName);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/DisconnectAccount")]
        void DisconnectAccount(string accountName);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/DisconnectAccount")]
        Task DisconnectAccountAsync(string accountName);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/DisconnectCharacter")]
        void DisconnectCharacter(string characterName);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/DisconnectCharacter")]
        Task DisconnectCharacterAsync(string characterName);

        [OperationContract(Action = "http://tempuri.org/ICommunicationService/HasRegisteredAccountLogin", ReplyAction = "http://tempuri.org/ICommunicationService/HasRegisteredAccountLoginResponse")]
        bool HasRegisteredAccountLogin(string name, long sessionId);

        [OperationContract(Action = "http://tempuri.org/ICommunicationService/HasRegisteredAccountLogin", ReplyAction = "http://tempuri.org/ICommunicationService/HasRegisteredAccountLoginResponse")]
        Task<bool> HasRegisteredAccountLoginAsync(string name, long sessionId);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/RegisterAccountLogin")]
        void RegisterAccountLogin(string name, long sessionId);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/RegisterAccountLogin")]
        Task RegisterAccountLoginAsync(string name, long sessionId);

        #endregion
    }

    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationServiceCallback
    {
        #region Methods

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/ConnectAccountCallback")]
        void ConnectAccountCallback(string accountName, int sessionId);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/ConnectCharacterCallback")]
        void ConnectCharacterCallback(string characterName);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/DisconnectAccountCallback")]
        void DisconnectAccountCallback(string accountName);

        [OperationContract(IsOneWay = true, Action = "http://tempuri.org/ICommunicationService/DisconnectCharacterCallback")]
        void DisconnectCharacterCallback(string characterName);

        #endregion
    }

    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationServiceChannel : ICommunicationService, IClientChannel
    {
    }

    [DebuggerStepThrough()]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public partial class CommunicationServiceClient : DuplexClientBase<ICommunicationService>, ICommunicationService
    {
        #region Instantiation

        public CommunicationServiceClient(InstanceContext callbackInstance) :
                base(callbackInstance)
        {
        }

        public CommunicationServiceClient(InstanceContext callbackInstance, string endpointConfigurationName) :
                base(callbackInstance, endpointConfigurationName)
        {
        }

        public CommunicationServiceClient(InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) :
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }

        public CommunicationServiceClient(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress) :
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }

        public CommunicationServiceClient(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress) :
                base(callbackInstance, binding, remoteAddress)
        {
        }

        #endregion

        #region Methods

        public bool AccountIsConnected(string accountName)
        {
            return base.Channel.AccountIsConnected(accountName);
        }

        public Task<bool> AccountIsConnectedAsync(string accountName)
        {
            return base.Channel.AccountIsConnectedAsync(accountName);
        }

        public void Cleanup()
        {
            base.Channel.Cleanup();
        }

        public Task CleanupAsync()
        {
            return base.Channel.CleanupAsync();
        }

        public bool ConnectAccount(string accountName, int sessionId)
        {
            return base.Channel.ConnectAccount(accountName, sessionId);
        }

        public Task<bool> ConnectAccountAsync(string accountName, int sessionId)
        {
            return base.Channel.ConnectAccountAsync(accountName, sessionId);
        }

        public bool ConnectCharacter(string characterName, string accountName)
        {
            return base.Channel.ConnectCharacter(characterName, accountName);
        }

        public Task<bool> ConnectCharacterAsync(string characterName, string accountName)
        {
            return base.Channel.ConnectCharacterAsync(characterName, accountName);
        }

        public void DisconnectAccount(string accountName)
        {
            base.Channel.DisconnectAccount(accountName);
        }

        public Task DisconnectAccountAsync(string accountName)
        {
            return base.Channel.DisconnectAccountAsync(accountName);
        }

        public void DisconnectCharacter(string characterName)
        {
            base.Channel.DisconnectCharacter(characterName);
        }

        public Task DisconnectCharacterAsync(string characterName)
        {
            return base.Channel.DisconnectCharacterAsync(characterName);
        }

        public bool HasRegisteredAccountLogin(string name, long sessionId)
        {
            return base.Channel.HasRegisteredAccountLogin(name, sessionId);
        }

        public Task<bool> HasRegisteredAccountLoginAsync(string name, long sessionId)
        {
            return base.Channel.HasRegisteredAccountLoginAsync(name, sessionId);
        }

        public void RegisterAccountLogin(string name, long sessionId)
        {
            base.Channel.RegisterAccountLogin(name, sessionId);
        }

        public Task RegisterAccountLoginAsync(string name, long sessionId)
        {
            return base.Channel.RegisterAccountLoginAsync(name, sessionId);
        }

        #endregion
    }
}